{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as musique from \"musique\";\r\nimport {AlbumOutput, SongOutput, AlbumParser, SongParser} from \"musique\";\r\nimport * as async from \"async\";\r\nimport * as program from \"commander\";\r\nimport * as ffmpeg from \"fluent-ffmpeg\";\r\nimport * as Jimp from \"jimp\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as ProgressBar from \"progress\";\r\nimport * as request from \"request\";\r\nimport * as fs from \"fs\";\r\nimport * as readline from \"readline\";\r\n\r\nconst nodeID3v23 = require(\"node-id3\");\r\nconst nodeID3v24 = require(\"node-id3v2.4\");\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nclass Album {\r\n    parser: AlbumParser;\r\n    date: string;\r\n    label: string;\r\n    language: string;\r\n    title: string;\r\n    artists: string;\r\n    folder: string;\r\n    art: string;\r\n}\r\n\r\nclass Song {\r\n    parser: SongParser;\r\n    title: string;\r\n    track: string;\r\n    artists: string;\r\n    file: string;\r\n}\r\n\r\nprogram\r\n    .command(\"song\")\r\n    .action(() => {\r\n        console.log(\"Musique\");\r\n        console.log(\"\");\r\n\r\n        let songUrl: string,\r\n            songFile: string;\r\n\r\n        let album: Album,\r\n            song: Song;\r\n\r\n        async.series([\r\n            callback => {\r\n                async.series([\r\n                    callback => {\r\n                        rl.question(\"Song url: \", answer => {\r\n                            if (answer) {\r\n                                songUrl = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song file: \", answer => {\r\n                            console.log(\"\");\r\n\r\n                            if (answer) {\r\n                                songFile = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        if (!songUrl && !songFile) {\r\n                            callback(new Error());\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    }\r\n                ], error => {\r\n                    callback(error);\r\n                })\r\n            }, callback => {\r\n                if (songUrl) {\r\n                    console.log(\"Parsing song...\");\r\n\r\n                    let platform: \"deezer\" | \"saavn\";\r\n\r\n                    if (songUrl.includes(\"deezer\")) {\r\n                        platform = \"deezer\";\r\n                    } else if (songUrl.includes(\"saavn\")) {\r\n                        platform = \"saavn\";\r\n                    }\r\n\r\n                    let albumParser: AlbumParser;\r\n\r\n                    musique.parseSong(platform, songUrl)\r\n                        .then(parser => parser.parse())\r\n                        .then(parser => parser.parseAlbum(childParser => {\r\n                            albumParser = childParser;\r\n\r\n                            console.log(\"Parsing album...\");\r\n                            console.log(\"\");\r\n\r\n                            return childParser.parse();\r\n                        }))\r\n                        .then(parser => {\r\n                            let songOutput: SongOutput = parser.output,\r\n                                albumOutput: AlbumOutput = songOutput.album;\r\n\r\n                            album = new Album();\r\n                            album.parser = albumParser;\r\n                            album.date = albumOutput.date;\r\n                            album.label = albumOutput.label;\r\n                            album.language = albumOutput.language;\r\n                            album.title = albumOutput.title;\r\n                            album.artists = [...new Set(albumOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                            song = new Song();\r\n                            song.parser = parser;\r\n                            song.title = songOutput.title;\r\n                            song.track = songOutput.track;\r\n                            song.artists = [...new Set(songOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                            if (songFile) {\r\n                                song.file = songFile;\r\n                            }\r\n\r\n                            callback();\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else if (songFile) {\r\n                    let tagMap: Map<string, any> = new Map<string, any>();\r\n\r\n                    for (let frame of nodeID3v24.readTag(songFile).frames) {\r\n                        tagMap.set(frame.type, frame.data);\r\n                    }\r\n\r\n                    album = new Album();\r\n                    album.date = tagMap.get(\"TDRL\").text.replace(\"\\u0000\", \"\");\r\n                    album.label = tagMap.get(\"TPUB\").text;\r\n                    album.language = tagMap.get(\"TLAN\").text;\r\n                    album.title = tagMap.get(\"TALB\").text;\r\n                    album.artists = tagMap.get(\"TPE2\").text;\r\n\r\n                    song = new Song();\r\n                    song.title = tagMap.get(\"TIT2\").text;\r\n                    song.track = tagMap.get(\"TRCK\").text;\r\n                    song.artists = tagMap.get(\"TPE1\").text;\r\n\r\n                    song.file = songFile;\r\n\r\n                    if (tagMap.has(\"APIC\")) {\r\n                        album.art = songFile.replace(\".mp3\", \".png\");\r\n\r\n                        fs.writeFile(album.art, tagMap.get(\"APIC\").picture, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                }\r\n            }, callback => {\r\n                console.log(\"Updating album...\");\r\n                console.log(\"Album title: \" + album.title);\r\n                console.log(\"Album artists: \" + album.artists);\r\n                console.log(\"Album date: \" + album.date);\r\n                console.log(\"Album label: \" + album.label);\r\n                console.log(\"Album language: \" + album.language);\r\n\r\n                rl.question(\"Update album? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Album title: (\" + album.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album artists: (\" + album.artists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album date: (\" + album.date + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.date = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album label: (\" + album.label + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.label = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album language: (\" + album.language + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        album.language = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                console.log(\"Updating song...\");\r\n                console.log(\"Song track: \" + song.track);\r\n                console.log(\"Song title: \" + song.title);\r\n                console.log(\"Song artists: \" + song.artists);\r\n\r\n                rl.question(\"Update song? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Song track: (\" + song.track + \") \", answer => {\r\n                                    if (answer) {\r\n                                        song.track = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song title: (\" + song.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        song.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song artists: (\" + song.artists + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        song.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                album.folder = \"Songs/\" + album.language + \"/\";\r\n\r\n                if (album.language === \"English\" && song.title === album.title && song.track === \"1\") {\r\n                    album.folder += \"Singles/\";\r\n                }\r\n\r\n                album.folder += album.date.substr(0, 4) + \"/\" + album.title.replace(/\\//g, \"\") + \"/\";\r\n                album.folder = album.folder.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                mkdirp(album.folder, error => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                let songFile: string;\r\n\r\n                if (song.file) {\r\n                    songFile = song.file;\r\n                }\r\n\r\n                song.file = album.folder + song.track + \" - \" + song.title + \".mp3\";\r\n                song.file = song.file.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                if (!songFile) {\r\n                    let progressBar: ProgressBar = new ProgressBar(\"Downloading song\"\r\n                        + \"... [:bar] :percent :speedMBps :sizeMB :etas\", {\r\n                        total: 100,\r\n                        width: 10,\r\n                        incomplete: \" \"\r\n                    }), progress: any;\r\n\r\n                    song.parser.parseFile(downloadProgress => {\r\n                        progressBar.update(downloadProgress.percent, {\r\n                            speed: (downloadProgress.speed / 1024 / 1024).toFixed(1),\r\n                            size: (downloadProgress.size.transferred / 1024 / 1024).toFixed(1)\r\n                        });\r\n\r\n                        progress = downloadProgress;\r\n                    })\r\n                        .then(parser => {\r\n                            progressBar.update(1, {\r\n                                speed: (0).toFixed(1),\r\n                                size: (progress.size.total / 1024 / 1024).toFixed(1)\r\n                            });\r\n\r\n                            console.log(\"\");\r\n\r\n                            fs.writeFile(song.file, parser.output.file, error => {\r\n                                if (error) {\r\n                                    callback(error);\r\n                                    return;\r\n                                }\r\n\r\n                                callback();\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else {\r\n                    fs.rename(songFile, song.file, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }\r\n            }, callback => {\r\n                ffmpeg.ffprobe(song.file, (error, data) => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    if (data.format.bit_rate >= 320000) {\r\n                        callback();\r\n                        return;\r\n                    }\r\n\r\n                    let tempSongFile: string = song.file.replace(\".mp3\", \".tmp\");\r\n\r\n                    fs.rename(song.file, tempSongFile, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        let progressBar: ProgressBar = new ProgressBar(\"Converting song\"\r\n                            + \"... [:bar] :percent :sizeMB :etas\", {\r\n                            total: 100,\r\n                            width: 10,\r\n                            incomplete: \" \"\r\n                        }), progress: any;\r\n\r\n                        ffmpeg(tempSongFile)\r\n                            .audioBitrate(\"320k\")\r\n                            .on(\"progress\", convertProgress => {\r\n                                progressBar.update(convertProgress.percent / 100, {\r\n                                    size: (convertProgress.targetSize / 1024).toFixed(1)\r\n                                });\r\n\r\n                                progress = convertProgress;\r\n                            })\r\n                            .on(\"error\", error => {\r\n                                callback(error);\r\n                            })\r\n                            .on(\"end\", () => {\r\n                                progressBar.update(1, {\r\n                                    size: (progress.targetSize / 1024).toFixed(1)\r\n                                });\r\n\r\n                                fs.unlink(tempSongFile, error => {\r\n                                    if (error) {\r\n                                        callback(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    console.log(\"\");\r\n\r\n                                    callback();\r\n                                });\r\n                            })\r\n                            .save(song.file);\r\n                    });\r\n                });\r\n            }, callback => {\r\n                let albumArt: string;\r\n\r\n                if (album.art) {\r\n                    albumArt = album.art;\r\n                }\r\n\r\n                album.art = album.folder + song.track + \" - \" + song.title + \".png\";\r\n                album.art = album.art.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                if (!albumArt) {\r\n                    request(album.parser.output.art)\r\n                        .on(\"error\", error => {\r\n                            callback(error);\r\n                        })\r\n                        .pipe(fs.createWriteStream(album.art))\r\n                        .on(\"finish\", () => {\r\n                            Jimp.read(album.art)\r\n                                .then(image => {\r\n                                    image.resize(512, 512, Jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                        .write(album.art, error => {\r\n                                            if (error) {\r\n                                                callback(error);\r\n                                                return;\r\n                                            }\r\n\r\n                                            callback();\r\n                                        });\r\n                                })\r\n                                .catch(error => {\r\n                                    callback(error);\r\n                                });\r\n                        });\r\n                } else {\r\n                    fs.rename(albumArt, album.art, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }\r\n            }, callback => {\r\n                nodeID3v23.removeTags(song.file);\r\n\r\n                nodeID3v23.write({\r\n                    album: album.title,\r\n                    artist: song.artists,\r\n                    image: album.art,\r\n                    language: album.language,\r\n                    performerInfo: album.artists,\r\n                    publisher: album.label,\r\n                    title: song.title,\r\n                    trackNumber: song.track\r\n                }, song.file);\r\n\r\n                let tag = nodeID3v24.readTag(song.file, {\r\n                    targetversion: 4\r\n                });\r\n                tag.addFrame(\"TDRC\", [album.date]);\r\n                tag.addFrame(\"TDRL\", [album.date]);\r\n                tag.write();\r\n\r\n                fs.unlink(album.art, error => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"Completed!\");\r\n\r\n                    callback();\r\n                });\r\n            }\r\n        ], error => {\r\n            rl.close();\r\n\r\n            if (error) {\r\n                console.error(error);\r\n            }\r\n        });\r\n    });\r\n\r\nprogram\r\n    .command(\"album\")\r\n    .action(() => {\r\n        console.log(\"Musique\");\r\n        console.log(\"\");\r\n\r\n        let albumUrl: string,\r\n            albumFolder: string,\r\n            songTracks: string;\r\n\r\n        let songFileMap: Map<number, string> = new Map<number, string>();\r\n\r\n        let album: Album,\r\n            songs: Song[] = [];\r\n\r\n        async.series([\r\n            callback => {\r\n                async.series([\r\n                    callback => {\r\n                        rl.question(\"Album url: \", answer => {\r\n                            if (answer) {\r\n                                albumUrl = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album folder: \", answer => {\r\n                            if (answer) {\r\n                                albumFolder = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song tracks: \", answer => {\r\n                            console.log(\"\");\r\n\r\n                            if (answer) {\r\n                                songTracks = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        if (!albumUrl && !albumFolder || albumUrl && !songTracks) {\r\n                            callback(new Error());\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    }\r\n                ], error => {\r\n                    callback(error);\r\n                });\r\n            }, callback => {\r\n                if (albumFolder) {\r\n                    fs.readdir(albumFolder, (error, files) => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        for (let file of files.filter(value => value.endsWith(\".mp3\"))) {\r\n                            songFileMap.set(parseInt(file.match(/(\\d+) - /)[1]) - 1, file);\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }\r\n            }, callback => {\r\n                if (albumUrl) {\r\n                    console.log(\"Parsing album...\");\r\n\r\n                    let songIndexes: number[] = [...new Set(songTracks.split(\", \")\r\n                        .map(value => parseInt(value) - 1))].sort();\r\n\r\n                    let platform: \"deezer\" | \"saavn\";\r\n\r\n                    if (albumUrl.includes(\"deezer\")) {\r\n                        platform = \"deezer\";\r\n                    } else if (albumUrl.includes(\"saavn\")) {\r\n                        platform = \"saavn\";\r\n                    }\r\n\r\n                    let songParserMap: Map<number, SongParser> = new Map<number, SongParser>();\r\n\r\n                    musique.parseAlbum(platform, albumUrl)\r\n                        .then(parser => parser.parse())\r\n                        .then(parser => parser.parseSongs((childParser, index) => {\r\n                            songParserMap.set(index, childParser);\r\n\r\n                            console.log(\"Parsing song \" + (index + 1) + \"...\");\r\n\r\n                            return childParser.parse();\r\n                        }, ...songIndexes))\r\n                        .then(parser => {\r\n                            console.log(\"\");\r\n\r\n                            let albumOutput: AlbumOutput = parser.output;\r\n\r\n                            album = new Album();\r\n                            album.parser = parser;\r\n                            album.date = albumOutput.date;\r\n                            album.label = albumOutput.label;\r\n                            album.language = albumOutput.language;\r\n                            album.title = albumOutput.title;\r\n                            album.artists = [...new Set(albumOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                            for (let songIndex of songIndexes) {\r\n                                let songOutput: SongOutput = albumOutput.songs[songIndex];\r\n\r\n                                let song: Song = new Song();\r\n                                song.parser = songParserMap.get(songIndex);\r\n                                song.title = songOutput.title;\r\n                                song.track = songOutput.track;\r\n                                song.artists = [...new Set(songOutput.artists\r\n                                    .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                                if (songFileMap) {\r\n                                    song.file = songFileMap.get(songIndex);\r\n                                }\r\n\r\n                                songs.push(song);\r\n                            }\r\n\r\n                            callback();\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else if (albumFolder) {\r\n                    let tagMap: Map<string, any> = new Map<string, any>();\r\n\r\n                    for (let frame of nodeID3v24.readTag(songFileMap.get(0)).frames) {\r\n                        tagMap.set(frame.type, frame.data);\r\n                    }\r\n\r\n                    album = new Album();\r\n                    album.date = tagMap.get(\"TDRL\").text.replace(\"\\u0000\", \"\");\r\n                    album.label = tagMap.get(\"TPUB\").text;\r\n                    album.language = tagMap.get(\"TLAN\").text;\r\n                    album.title = tagMap.get(\"TALB\").text;\r\n                    album.artists = tagMap.get(\"TPE2\").text;\r\n\r\n                    async.eachSeries(songFileMap.values(), (songFile, callback) => {\r\n                        let tagMap: Map<string, any> = new Map<string, any>();\r\n\r\n                        for (let frame of nodeID3v24.readTag(songFile).frames) {\r\n                            tagMap.set(frame.type, frame.data);\r\n                        }\r\n\r\n                        let song: Song = new Song();\r\n                        song.title = tagMap.get(\"TIT2\").text;\r\n                        song.track = tagMap.get(\"TRCK\").text;\r\n                        song.artists = tagMap.get(\"TPE1\").text;\r\n\r\n                        song.file = songFile;\r\n\r\n                        if (tagMap.has(\"APIC\")) {\r\n                            album.art = songFile.replace(\".mp3\", \".png\");\r\n\r\n                            fs.writeFile(album.art, tagMap.get(\"APIC\").picture, error => {\r\n                                if (error) {\r\n                                    callback(error);\r\n                                    return;\r\n                                }\r\n\r\n                                songs.push(song);\r\n\r\n                                callback();\r\n                            });\r\n                        } else {\r\n                            songs.push(song);\r\n\r\n                            callback();\r\n                        }\r\n                    }, error => {\r\n                        callback(error);\r\n                    });\r\n                }\r\n            }, callback => {\r\n                console.log(\"Updating album...\");\r\n                console.log(\"Album title: \" + album.title);\r\n                console.log(\"Album artists: \" + album.artists);\r\n                console.log(\"Album date: \" + album.date);\r\n                console.log(\"Album label: \" + album.label);\r\n                console.log(\"Album language: \" + album.language);\r\n\r\n                rl.question(\"Update album? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Album title: (\" + album.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album artists: (\" + album.artists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album date: (\" + album.date + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.date = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album label: (\" + album.label + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.label = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album language: (\" + album.language + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        album.language = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    console.log(\"Updating song \" + song.track + \"...\");\r\n                    console.log(\"Song track: \" + song.track);\r\n                    console.log(\"Song title: \" + song.title);\r\n                    console.log(\"Song artists: \" + song.artists);\r\n\r\n                    rl.question(\"Update song \" + song.track + \"? (no) \", answer => {\r\n                        console.log(\"\");\r\n\r\n                        if (answer === \"y\" || answer === \"yes\") {\r\n                            async.series([\r\n                                callback => {\r\n                                    rl.question(\"Song track: (\" + song.track + \") \", answer => {\r\n                                        if (answer) {\r\n                                            song.track = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }, callback => {\r\n                                    rl.question(\"Song title: (\" + song.title + \") \", answer => {\r\n                                        if (answer) {\r\n                                            song.title = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }, callback => {\r\n                                    rl.question(\"Song artists: (\" + song.artists + \") \", answer => {\r\n                                        console.log(\"\");\r\n\r\n                                        if (answer) {\r\n                                            song.artists = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }\r\n                            ], () => {\r\n                                callback();\r\n                            });\r\n                        } else {\r\n                            callback();\r\n                        }\r\n                    });\r\n                }, () => {\r\n                    callback();\r\n                })\r\n            }, callback => {\r\n                album.folder = \"Songs/\" + album.language + \"/\";\r\n\r\n                if (album.language === \"English\" && songs[0].title === album.title && songs[0].track === \"1\") {\r\n                    album.folder += \"Singles/\";\r\n                }\r\n\r\n                album.folder += album.date.substr(0, 4) + \"/\" + album.title.replace(/\\//g, \"\") + \"/\";\r\n                album.folder = album.folder.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                mkdirp(album.folder, error => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    let songFile: string;\r\n\r\n                    if (song.file) {\r\n                        songFile = song.file;\r\n                    }\r\n\r\n                    song.file = album.folder + song.track + \" - \" + song.title + \".mp3\";\r\n                    song.file = song.file.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                    if (!songFile) {\r\n                        let progressBar: ProgressBar = new ProgressBar(\"Downloading song \"\r\n                            + song.track + \"... [:bar] :percent :speedMBps :sizeMB :etas\", {\r\n                            total: 100,\r\n                            width: 10,\r\n                            incomplete: \" \"\r\n                        }), progress: any;\r\n\r\n                        song.parser.parseFile(downloadProgress => {\r\n                            progressBar.update(downloadProgress.percent, {\r\n                                speed: (downloadProgress.speed / 1024 / 1024).toFixed(1),\r\n                                size: (downloadProgress.size.transferred / 1024 / 1024).toFixed(1)\r\n                            });\r\n\r\n                            progress = downloadProgress;\r\n                        })\r\n                            .then(parser => {\r\n                                progressBar.update(1, {\r\n                                    speed: (0).toFixed(1),\r\n                                    size: (progress.size.total / 1024 / 1024).toFixed(1)\r\n                                });\r\n\r\n                                fs.writeFile(song.file, parser.output.file, error => {\r\n                                    if (error) {\r\n                                        callback(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            })\r\n                            .catch(error => {\r\n                                callback(error);\r\n                            });\r\n                    } else {\r\n                        fs.rename(songFile, song.file, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                }, error => {\r\n                    console.log(\"\");\r\n\r\n                    callback(error);\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    ffmpeg.ffprobe(song.file, (error, data) => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        if (data.format.bit_rate >= 320000) {\r\n                            callback();\r\n                            return;\r\n                        }\r\n\r\n                        let tempSongFile: string = song.file.replace(\".mp3\", \".tmp\");\r\n\r\n                        fs.rename(song.file, tempSongFile, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            let progressBar: ProgressBar = new ProgressBar(\"Converting song \"\r\n                                + song.track + \"... [:bar] :percent :sizeMB :etas\", {\r\n                                total: 100,\r\n                                width: 10,\r\n                                incomplete: \" \"\r\n                            }), progress: any;\r\n\r\n                            ffmpeg(tempSongFile)\r\n                                .audioBitrate(\"320k\")\r\n                                .on(\"progress\", convertProgress => {\r\n                                    progressBar.update(convertProgress.percent / 100, {\r\n                                        size: (convertProgress.targetSize / 1024).toFixed(1)\r\n                                    });\r\n\r\n                                    progress = convertProgress;\r\n                                })\r\n                                .on(\"error\", error => {\r\n                                    callback(error);\r\n                                })\r\n                                .on(\"end\", () => {\r\n                                    progressBar.update(1, {\r\n                                        size: (progress.targetSize / 1024).toFixed(1)\r\n                                    });\r\n\r\n                                    fs.unlink(tempSongFile, error => {\r\n                                        if (error) {\r\n                                            callback(error);\r\n                                            return;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                })\r\n                                .save(song.file);\r\n                        });\r\n                    });\r\n                }, error => {\r\n                    console.log(\"\");\r\n\r\n                    callback(error);\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    let albumArt: string;\r\n\r\n                    if (album.art) {\r\n                        albumArt = album.art;\r\n                    }\r\n\r\n                    album.art = album.folder + song.track + \" - \" + song.title + \".png\";\r\n                    album.art = album.art.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                    if (!albumArt) {\r\n                        request(album.parser.output.art)\r\n                            .on(\"error\", error => {\r\n                                callback(error);\r\n                            })\r\n                            .pipe(fs.createWriteStream(album.art))\r\n                            .on(\"finish\", () => {\r\n                                Jimp.read(album.art)\r\n                                    .then(image => {\r\n                                        image.resize(512, 512, Jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                            .write(album.art, error => {\r\n                                                if (error) {\r\n                                                    callback(error);\r\n                                                    return;\r\n                                                }\r\n\r\n                                                callback();\r\n                                            });\r\n                                    })\r\n                                    .catch(error => {\r\n                                        callback(error);\r\n                                    });\r\n                            });\r\n                    } else {\r\n                        fs.rename(albumArt, album.art, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                }, error => {\r\n                    callback(error);\r\n                })\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    nodeID3v23.removeTags(song.file);\r\n\r\n                    nodeID3v23.write({\r\n                        album: album.title,\r\n                        artist: song.artists,\r\n                        image: album.art,\r\n                        language: album.language,\r\n                        performerInfo: album.artists,\r\n                        publisher: album.label,\r\n                        title: song.title,\r\n                        trackNumber: song.track\r\n                    }, song.file);\r\n\r\n                    let tag = nodeID3v24.readTag(song.file, {\r\n                        targetversion: 4\r\n                    });\r\n                    tag.addFrame(\"TDRC\", [album.date]);\r\n                    tag.addFrame(\"TDRL\", [album.date]);\r\n                    tag.write();\r\n\r\n                    fs.unlink(album.art, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }, () => {\r\n                    console.log(\"Completed!\");\r\n\r\n                    callback();\r\n                })\r\n            }\r\n        ], error => {\r\n            rl.close();\r\n\r\n            if (error) {\r\n                console.error(error);\r\n            }\r\n        });\r\n    });\r\n\r\nprogram.parse(process.argv);\r\n"]}