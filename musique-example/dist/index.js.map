{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as musique from \"musique\";\r\nimport {AlbumOutput, SongOutput, SongParser} from \"musique\";\r\nimport * as Promise from \"bluebird\";\r\nimport * as readline from \"readline\";\r\nimport * as async from \"async\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as fs from \"fs\";\r\nimport * as ProgressBar from \"progress\";\r\nimport * as request from \"request\";\r\nimport * as ffmpeg from \"fluent-ffmpeg\";\r\nimport * as Jimp from \"jimp\";\r\n\r\nconst nodeID3v23 = require(\"node-id3\");\r\nconst nodeID3v24 = require(\"node-id3v2.4\");\r\n\r\nfunction run(): Promise<void> {\r\n    console.log(\"Starting...\");\r\n    console.log(\"\");\r\n\r\n    let songUrl: string,\r\n        songFileName: string,\r\n        songParser: SongParser,\r\n        songTitle: string,\r\n        songTrack: string,\r\n        songArtists: string,\r\n        albumDate: string,\r\n        albumLabel: string,\r\n        albumLanguage: string,\r\n        albumTitle: string,\r\n        albumArtists: string,\r\n        directoryName: string,\r\n        mp3FileName: string,\r\n        artFileName: string;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        let rl = readline.createInterface({\r\n            input: process.stdin,\r\n            output: process.stdout\r\n        });\r\n\r\n        rl.question(\"Song args: \", answer => {\r\n            console.log(\"\");\r\n\r\n            if (!answer) {\r\n                rl.close();\r\n\r\n                reject(new Error(\"Invalid song args!\"));\r\n                return;\r\n            }\r\n\r\n            let songArgs: string[] = answer.split(\"; \");\r\n\r\n            songUrl = songArgs[0];\r\n\r\n            if (songArgs.length > 1) {\r\n                songFileName = songArgs[1];\r\n            }\r\n\r\n            rl.close();\r\n\r\n            resolve();\r\n        });\r\n    })\r\n        .then(() => {\r\n            let platformName: \"deezer\" | \"saavn\";\r\n\r\n            if (songUrl.includes(\"deezer\")) {\r\n                platformName = \"deezer\";\r\n            } else if (songUrl.includes(\"saavn\")) {\r\n                platformName = \"saavn\";\r\n            }\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                musique.parseSong(platformName!, songUrl)\r\n                    .then(parser => parser.parse())\r\n                    .then(parser => parser.parseAlbum(childParser => childParser.parse()))\r\n                    .then(parser => {\r\n                        songParser = parser;\r\n\r\n                        let songOutput: SongOutput = parser.output,\r\n                            albumOutput: AlbumOutput = songOutput.album;\r\n\r\n                        songTitle = songOutput.title;\r\n                        songTrack = songOutput.track;\r\n                        songArtists = [...new Set(songOutput.artists.map(artist => artist.title))].join(\"; \");\r\n                        albumDate = albumOutput.date;\r\n                        albumLabel = albumOutput.label;\r\n                        albumLanguage = albumOutput.language;\r\n                        albumTitle = albumOutput.title;\r\n                        albumArtists = [...new Set(albumOutput.artists.map(artist => artist.title))].join(\"; \");\r\n\r\n                        songArtists = songArtists.replace(/\\.(\\w)/g, \". $1\");\r\n                        albumArtists = albumArtists.replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            return new Promise<void>(resolve => {\r\n                console.log(\"Song title: \" + songTitle);\r\n                console.log(\"Album title: \" + albumTitle);\r\n                console.log(\"Song artists: \" + songArtists);\r\n                console.log(\"Album artists: \" + albumArtists);\r\n                console.log(\"Song track: \" + songTrack);\r\n                console.log(\"Album date: \" + albumDate);\r\n                console.log(\"Album label: \" + albumLabel);\r\n                console.log(\"Album language: \" + albumLanguage);\r\n                console.log(\"\");\r\n\r\n                let rl = readline.createInterface({\r\n                    input: process.stdin,\r\n                    output: process.stdout\r\n                });\r\n\r\n                rl.question(\"Update? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Song title: (\" + songTitle + \") \", answer => {\r\n                                    if (answer) {\r\n                                        songTitle = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album title: (\" + albumTitle + \") \", answer => {\r\n                                    if (answer) {\r\n                                        albumTitle = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song artists: (\" + songArtists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        songArtists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album artists: (\" + albumArtists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        albumArtists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song track: (\" + songTrack + \") \", answer => {\r\n                                    if (answer) {\r\n                                        songTrack = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album date: (\" + albumDate + \") \", answer => {\r\n                                    if (answer) {\r\n                                        albumDate = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album label: (\" + albumLabel + \") \", answer => {\r\n                                    if (answer) {\r\n                                        albumLabel = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album language: (\" + albumLanguage + \") \", answer => {\r\n                                    if (answer) {\r\n                                        albumLanguage = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            console.log(\"\");\r\n\r\n                            rl.close();\r\n\r\n                            resolve();\r\n                        });\r\n                    } else {\r\n                        rl.close();\r\n\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n        })\r\n        .then(() => {\r\n            directoryName = \"Songs/\"\r\n                + albumLanguage + \"/\";\r\n\r\n            if (albumLanguage === \"English\" && songTitle === albumTitle && songTrack === \"1\") {\r\n                directoryName += \"Singles/\";\r\n            }\r\n\r\n            directoryName += albumDate.substr(0, 4) + \"/\"\r\n                + albumTitle + \"/\";\r\n            directoryName = directoryName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                mkdirp(directoryName, error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        })\r\n        .then(() => {\r\n            mp3FileName = directoryName + songTrack + \" - \" + songTitle + \".mp3\";\r\n            mp3FileName = mp3FileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                if (songFileName) {\r\n                    fs.rename(songFileName, mp3FileName, error => {\r\n                        if (error) {\r\n                            reject(error);\r\n                            return;\r\n                        }\r\n\r\n                        resolve();\r\n                    });\r\n                } else {\r\n                    let progressBar: ProgressBar = new ProgressBar(\"Downloading... [:bar] :percent :speedMBps :sizeMB :etas\", {\r\n                        total: 100,\r\n                        width: 10,\r\n                        incomplete: \" \"\r\n                    }), progress: any;\r\n\r\n                    songParser.parseFile(downloadProgress => {\r\n                        progressBar.update(downloadProgress.percent, {\r\n                            speed: Math.round(downloadProgress.speed / 1024 / 1024 * 10) / 10,\r\n                            size: Math.round(downloadProgress.size.transferred / 1024 / 1024 * 10) / 10\r\n                        });\r\n\r\n                        progress = downloadProgress;\r\n                    })\r\n                        .then(parser => {\r\n                            progressBar.update(1, {\r\n                                speed: Math.round(progress.speed / 1024 / 1024 * 10) / 10,\r\n                                size: Math.round(progress.size.total / 1024 / 1024 * 10) / 10\r\n                            });\r\n\r\n                            fs.writeFile(mp3FileName, parser.output.file, error => {\r\n                                if (error) {\r\n                                    reject(error);\r\n                                    return;\r\n                                }\r\n\r\n                                console.log(\"\");\r\n\r\n                                resolve();\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        })\r\n        .then(() => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                ffmpeg.ffprobe(mp3FileName, (error, data) => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    if (data.format.bit_rate >= 320000) {\r\n                        resolve();\r\n                        return;\r\n                    }\r\n\r\n                    let tmpFileName: string = mp3FileName.replace(\".mp3\", \".tmp\");\r\n\r\n                    fs.rename(mp3FileName, tmpFileName, error => {\r\n                        if (error) {\r\n                            reject(error);\r\n                            return;\r\n                        }\r\n\r\n                        let progressBar: ProgressBar = new ProgressBar(\"Converting... [:bar] :percent :sizeMB :etas\", {\r\n                            total: 100,\r\n                            width: 10,\r\n                            incomplete: \" \"\r\n                        }), progress: any;\r\n\r\n                        ffmpeg(tmpFileName)\r\n                            .audioBitrate(\"320k\")\r\n                            .on(\"progress\", convertProgress => {\r\n                                progressBar.update(convertProgress.percent / 100, {\r\n                                    size: Math.round(convertProgress.targetSize / 1024 * 10) / 10\r\n                                });\r\n\r\n                                progress = convertProgress;\r\n                            })\r\n                            .on(\"error\", error => {\r\n                                reject(error);\r\n                            })\r\n                            .on(\"end\", () => {\r\n                                progressBar.update(1, {\r\n                                    size: Math.round(progress.targetSize / 1024 * 10) / 10\r\n                                });\r\n\r\n                                fs.unlink(tmpFileName, error => {\r\n                                    if (error) {\r\n                                        reject(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    console.log(\"\");\r\n\r\n                                    resolve();\r\n                                });\r\n                            })\r\n                            .save(mp3FileName);\r\n                    });\r\n                });\r\n            });\r\n        })\r\n        .then(() => {\r\n            artFileName = directoryName + songTrack + \" - \" + songTitle + \".png\";\r\n            artFileName = artFileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                request(songParser.output.album.art)\r\n                    .on(\"error\", error => {\r\n                        reject(error);\r\n                    })\r\n                    .pipe(fs.createWriteStream(artFileName))\r\n                    .on(\"finish\", () => {\r\n                        Jimp.read(artFileName)\r\n                            .then(image => {\r\n                                image.resize(512, 512, Jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                    .write(artFileName, error => {\r\n                                        if (error) {\r\n                                            reject(error);\r\n                                            return;\r\n                                        }\r\n\r\n                                        resolve();\r\n                                    });\r\n                            })\r\n                            .catch(error => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                nodeID3v23.removeTags(mp3FileName);\r\n\r\n                nodeID3v23.write({\r\n                    album: albumTitle,\r\n                    artist: songArtists,\r\n                    image: artFileName,\r\n                    language: albumLanguage,\r\n                    performerInfo: albumArtists,\r\n                    publisher: albumLabel,\r\n                    title: songTitle,\r\n                    trackNumber: songTrack\r\n                }, mp3FileName);\r\n\r\n                let tag = nodeID3v24.readTag(mp3FileName);\r\n                tag.addFrame(\"TDRC\", [albumDate]);\r\n                tag.addFrame(\"TDRL\", [albumDate]);\r\n                tag.write();\r\n\r\n                fs.unlink(artFileName, error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"Completed!\");\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n}\r\n\r\nrun()\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n"]}