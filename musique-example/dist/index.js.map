{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as musique from \"musique\";\r\nimport {AlbumOutput, SongOutput, SongParser} from \"musique\";\r\nimport * as readline from \"readline\";\r\nimport * as Promise from \"bluebird\";\r\nimport * as async from \"async\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as ProgressBar from \"progress\";\r\nimport * as fs from \"fs\";\r\nimport * as request from \"request\";\r\nimport * as Jimp from \"jimp\";\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nconst nodeID3v23 = require(\"node-id3\");\r\nconst nodeID3v24 = require(\"node-id3v2.4\");\r\n\r\nfunction downloadSong(songUrl: string): Promise<void> {\r\n    let platformName: \"deezer\" | \"saavn\";\r\n\r\n    if (songUrl.includes(\"deezer\")) {\r\n        platformName = \"deezer\";\r\n    } else if (songUrl.includes(\"saavn\")) {\r\n        platformName = \"saavn\";\r\n    }\r\n\r\n    let songParser: SongParser,\r\n        songGenre: string,\r\n        songTitle: string,\r\n        songTrack: string,\r\n        songArtists: string,\r\n        albumDate: string,\r\n        albumLabel: string,\r\n        albumLanguage: string,\r\n        albumTitle: string,\r\n        albumYear: string,\r\n        albumArtists: string,\r\n        directoryName: string,\r\n        songMp3FileName: string,\r\n        songArtFileName: string;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        console.log(\"Starting...\");\r\n        console.log(\"\");\r\n\r\n        musique.parseSong(platformName!, songUrl)\r\n            .then(parser => parser.parse())\r\n            .then(parser => parser.parseAlbum(childParser => childParser.parse()))\r\n            .then(parser => {\r\n                songParser = parser;\r\n\r\n                let songOutput: SongOutput = parser.output,\r\n                    albumOutput: AlbumOutput = songOutput.album;\r\n\r\n                songGenre = songOutput.genre;\r\n                songTitle = songOutput.title;\r\n                songTrack = songOutput.track;\r\n                songArtists = songOutput.artists.map(artist => artist.title).join(\"; \");\r\n                albumDate = albumOutput.date;\r\n                albumLabel = albumOutput.label;\r\n                albumLanguage = albumOutput.language;\r\n                albumTitle = albumOutput.title;\r\n                albumYear = albumOutput.year;\r\n                albumArtists = albumOutput.artists.map(artist => artist.title).join(\"; \");\r\n\r\n                {   // TODO: Remove later\r\n                    songArtists = songArtists.replace(\"A.R. Rahman\", \"A. R. Rahman\");\r\n                    albumArtists = albumArtists.replace(\"A.R. Rahman\", \"A. R. Rahman\");\r\n                }\r\n\r\n                resolve();\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    })\r\n        .then(() => {\r\n            return new Promise<void>(resolve => {\r\n                async.series([\r\n                    callback => {\r\n                        rl.question(\"Song title: (\" + songTitle + \") \", answer => {\r\n                            if (answer) {\r\n                                songTitle = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album title: (\" + albumTitle + \") \", answer => {\r\n                            if (answer) {\r\n                                albumTitle = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song artists: (\" + songArtists + \") \", answer => {\r\n                            if (answer) {\r\n                                songArtists = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album artists: (\" + albumArtists + \") \", answer => {\r\n                            if (answer) {\r\n                                albumArtists = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song track: (\" + songTrack + \") \", answer => {\r\n                            if (answer) {\r\n                                songTrack = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song genre: (\" + songGenre + \") \", answer => {\r\n                            if (answer) {\r\n                                songGenre = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album label: (\" + albumLabel + \") \", answer => {\r\n                            if (answer) {\r\n                                albumLabel = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album language: (\" + albumLanguage + \") \", answer => {\r\n                            if (answer) {\r\n                                albumLanguage = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album date: (\" + albumDate + \") \", answer => {\r\n                            if (answer) {\r\n                                albumDate = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album year: (\" + albumYear + \") \", answer => {\r\n                            if (answer) {\r\n                                albumYear = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                ], () => {\r\n                    rl.close();\r\n\r\n                    console.log(\"\");\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        })\r\n        .then(() => {\r\n            directoryName = \"Songs/\"\r\n                + albumLanguage + \"/\"\r\n                + albumYear + \"/\"\r\n                + albumTitle + \"/\";\r\n            directoryName = directoryName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                mkdirp(directoryName, error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        })\r\n        .then(() => {\r\n            songMp3FileName = directoryName + songTrack + \" - \" + songTitle + \".mp3\";\r\n            songMp3FileName = songMp3FileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                let progressBar: ProgressBar;\r\n\r\n                let newProgress: any;\r\n\r\n                songParser.parseFile(progress => {\r\n                    if (!progressBar) {\r\n                        progressBar = new ProgressBar(\"Downloading... [:bar] :percent :speed :size :time\", {\r\n                            total: progress.size.total,\r\n                            width: 10,\r\n                            head: \">\",\r\n                            incomplete: \" \",\r\n                            renderThrottle: 250\r\n                        });\r\n\r\n                        newProgress = progress;\r\n                        newProgress.size.downloaded = 0;\r\n                    }\r\n\r\n                    progressBar.tick(newProgress.size.transferred - newProgress.size.downloaded, {\r\n                        speed: Math.round(newProgress.speed / 1024 / 1024 * 10) / 10 + \"MBps\",\r\n                        size: Math.round(newProgress.size.transferred / 1024 / 1024 * 10) / 10 + \"/\"\r\n                        + Math.round(newProgress.size.total / 1024 / 1024 * 10) / 10 + \"MB\",\r\n                        time: Math.round(newProgress.time.remaining * 10) / 10 + \"s\"\r\n                    });\r\n\r\n                    newProgress.size.downloaded = newProgress.size.transferred;\r\n                })\r\n                    .then(parser => {\r\n                        fs.writeFile(songMp3FileName, parser.output.file, error => {\r\n                            if (error) {\r\n                                reject(error);\r\n                                return;\r\n                            }\r\n\r\n                            progressBar.tick(newProgress.size.total, {\r\n                                speed: Math.round(newProgress.speed / 1024 / 1024 * 10) / 10 + \"MBps\",\r\n                                size: Math.round(newProgress.size.total / 1024 / 1024 * 10) / 10 + \"/\"\r\n                                + Math.round(newProgress.size.total / 1024 / 1024 * 10) / 10 + \"MB\",\r\n                                time: \"0.0s\"\r\n                            });\r\n\r\n                            resolve();\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            songArtFileName = directoryName + songTrack + \" - \" + songTitle + \".png\";\r\n            songArtFileName = songArtFileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                request(songParser.output.album.art)\r\n                    .on(\"error\", error => {\r\n                        reject(error);\r\n                    })\r\n                    .pipe(fs.createWriteStream(songArtFileName))\r\n                    .on(\"finish\", () => {\r\n                        Jimp.read(songArtFileName)\r\n                            .then(image => {\r\n                                image.resize(512, 512, Jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                    .write(songArtFileName, error => {\r\n                                        if (error) {\r\n                                            reject(error);\r\n                                            return;\r\n                                        }\r\n\r\n                                        resolve();\r\n                                    });\r\n                            })\r\n                            .catch(error => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            nodeID3v23.removeTags(songMp3FileName);\r\n\r\n            nodeID3v23.write({\r\n                album: albumTitle,\r\n                artist: songArtists,\r\n                genre: songGenre,\r\n                image: songArtFileName,\r\n                language: albumLanguage,\r\n                performerInfo: albumArtists,\r\n                publisher: albumLabel,\r\n                title: songTitle,\r\n                trackNumber: songTrack,\r\n                year: albumYear,\r\n            }, songMp3FileName);\r\n\r\n            let tag = nodeID3v24.readTag(songMp3FileName);\r\n            tag.addFrame(\"TDRL\", [albumDate]);\r\n            tag.write();\r\n        })\r\n        .then(() => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                fs.unlink(songArtFileName, error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"\");\r\n                    console.log(\"Finished!\");\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n}\r\n\r\ndownloadSong(process.argv[2])\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n"]}