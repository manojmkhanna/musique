{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as musique from \"musique\";\r\nimport {AlbumOutput, SongOutput} from \"musique\";\r\nimport * as Promise from \"bluebird\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as fs from \"fs\";\r\nimport * as request from \"request\";\r\nimport * as jimp from \"jimp\";\r\n\r\nconst nodeID3v23 = require(\"node-id3\");\r\nconst nodeID3v24 = require(\"node-id3v2.4\");\r\n\r\nfunction downloadMp3(songOutput: SongOutput, albumOutput: AlbumOutput): Promise<void> {\r\n    let dirName: string, mp3FileName: string, artFileName: string;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        dirName = \"./Songs/\"\r\n            + albumOutput.language + \"/\"\r\n            + albumOutput.year + \"/\"\r\n            + albumOutput.title + \"/\";\r\n        dirName = dirName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n        mkdirp(dirName, error => {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    })\r\n        .then(() => {\r\n            mp3FileName = dirName + songOutput.track + \" - \" + songOutput.title + \".mp3\";\r\n            mp3FileName = mp3FileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                request.get(songOutput.mp3)\r\n                    .on(\"error\", error => {\r\n                        reject(error);\r\n                    })\r\n                    .pipe(fs.createWriteStream(mp3FileName))\r\n                    .on(\"finish\", () => {\r\n                        resolve();\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            artFileName = dirName + songOutput.track + \" - \" + songOutput.title + \".png\";\r\n            artFileName = artFileName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n            return new Promise<void>((resolve, reject) => {\r\n                request.get(albumOutput.art)\r\n                    .on(\"error\", error => {\r\n                        reject(error);\r\n                    })\r\n                    .pipe(fs.createWriteStream(artFileName))\r\n                    .on(\"finish\", () => {\r\n                        jimp.read(artFileName)\r\n                            .then(image => {\r\n                                image.resize(512, 512, jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                    .write(artFileName, error => {\r\n                                        if (error) {\r\n                                            reject(error);\r\n                                            return;\r\n                                        }\r\n\r\n                                        resolve();\r\n                                    });\r\n                            })\r\n                            .catch(error => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        })\r\n        .then(() => {\r\n            nodeID3v23.removeTags(mp3FileName);\r\n\r\n            nodeID3v23.write({\r\n                album: albumOutput.title,\r\n                artist: songOutput.artists.map((artist: any) => artist.title).join(\"; \"),\r\n                genre: songOutput.genre,\r\n                image: artFileName,\r\n                language: albumOutput.language,\r\n                performerInfo: albumOutput.artists.map((artist: any) => artist.title).join(\"; \"),\r\n                publisher: albumOutput.label,\r\n                title: songOutput.title,\r\n                trackNumber: songOutput.track,\r\n                year: albumOutput.year,\r\n            }, mp3FileName);\r\n\r\n            let tag = nodeID3v24.readTag(mp3FileName);\r\n            tag.addFrame(\"TDRL\", [albumOutput.date]);\r\n            tag.write();\r\n        })\r\n        .then(() => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                fs.unlink(artFileName, error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n}\r\n\r\nmusique.parseSong(\"saavn\", \"https://www.saavn.com/s/song/tamil/Mersal/Neethanae/MiIPaAFCBlc\")\r\n    .then(parser => parser.parse())\r\n    .then(parser => parser.parseAlbum(childParser => childParser.parse()))\r\n    .then(parser => downloadMp3(parser.output, parser.output.album))\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n"]}