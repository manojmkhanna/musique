{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as musique from \"musique\";\r\nimport {AlbumOutput, SongOutput, SongParser} from \"musique\";\r\nimport * as Promise from \"bluebird\";\r\nimport * as readline from \"readline\";\r\nimport * as async from \"async\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as fs from \"fs\";\r\nimport * as ProgressBar from \"progress\";\r\nimport * as request from \"request\";\r\nimport * as ffmpeg from \"fluent-ffmpeg\";\r\nimport * as Jimp from \"jimp\";\r\nimport * as program from \"commander\";\r\n\r\nconst nodeID3v23 = require(\"node-id3\");\r\nconst nodeID3v24 = require(\"node-id3v2.4\");\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nclass Album {\r\n    date: string;\r\n    label: string;\r\n    language: string;\r\n    title: string;\r\n    artists: string;\r\n    folder: string;\r\n    artFile: string;\r\n}\r\n\r\nclass Song {\r\n    title: string;\r\n    track: string;\r\n    artists: string;\r\n    parser: SongParser;\r\n    mp3File: string;\r\n}\r\n\r\nprogram\r\n    .command(\"song\")\r\n    .action(() => {\r\n        console.log(\"Musique\");\r\n        console.log(\"\");\r\n\r\n        let songUrl: string,\r\n            songFile: string;\r\n\r\n        let album: Album,\r\n            song: Song;\r\n\r\n        async.series([\r\n            callback => {\r\n                async.series([\r\n                    callback => {\r\n                        rl.question(\"Song url: \", answer => {\r\n                            if (answer) {\r\n                                songUrl = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song file: \", answer => {\r\n                            console.log(\"\");\r\n\r\n                            if (answer) {\r\n                                songFile = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                ], () => {\r\n                    callback();\r\n                })\r\n            }, callback => {\r\n                if (!songUrl && !songFile) {\r\n                    callback(new Error());\r\n                    return;\r\n                }\r\n\r\n                if (songUrl) {\r\n                    console.log(\"Parsing song...\");\r\n\r\n                    let platform: \"deezer\" | \"saavn\";\r\n\r\n                    if (songUrl.includes(\"deezer\")) {\r\n                        platform = \"deezer\";\r\n                    } else if (songUrl.includes(\"saavn\")) {\r\n                        platform = \"saavn\";\r\n                    }\r\n\r\n                    musique.parseSong(platform!, songUrl)\r\n                        .then(parser => parser.parse())\r\n                        .then(parser => parser.parseAlbum(childParser => {\r\n                            console.log(\"Parsing album...\");\r\n                            console.log(\"\");\r\n\r\n                            return childParser.parse();\r\n                        }))\r\n                        .then(parser => {\r\n                            let songOutput: SongOutput = parser.output,\r\n                                albumOutput: AlbumOutput = songOutput.album;\r\n\r\n                            album = new Album();\r\n                            album.date = albumOutput.date;\r\n                            album.label = albumOutput.label;\r\n                            album.language = albumOutput.language;\r\n                            album.title = albumOutput.title;\r\n                            album.artists = [...new Set(albumOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                            song = new Song();\r\n                            song.title = songOutput.title;\r\n                            song.track = songOutput.track;\r\n                            song.artists = [...new Set(songOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n                            song.parser = parser;\r\n\r\n                            callback();\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else if (songFile) {\r\n                    let tagMap: Map<string, string> = new Map<string, string>();\r\n\r\n                    for (let frame of nodeID3v24.readTag(songFile).frames) {\r\n                        tagMap.set(frame.type, frame.data.text);\r\n                    }\r\n\r\n                    album = new Album();\r\n                    album.date = tagMap.get(\"TDRL\")!.replace(\"\\u0000\", \"\");\r\n                    album.label = tagMap.get(\"TPUB\")!;\r\n                    album.language = tagMap.get(\"TLAN\")!;\r\n                    album.title = tagMap.get(\"TALB\")!;\r\n                    album.artists = tagMap.get(\"TPE2\")!;\r\n\r\n                    song = new Song();\r\n                    song.title = tagMap.get(\"TIT2\")!;\r\n                    song.track = tagMap.get(\"TRCK\")!;\r\n                    song.artists = tagMap.get(\"TPE1\")!;\r\n                    song.mp3File = songFile;\r\n\r\n                    callback();\r\n                }\r\n            }, callback => {\r\n                console.log(\"Updating album...\");\r\n                console.log(\"Album title: \" + album.title);\r\n                console.log(\"Album artists: \" + album.artists);\r\n                console.log(\"Album date: \" + album.date);\r\n                console.log(\"Album label: \" + album.label);\r\n                console.log(\"Album language: \" + album.language);\r\n\r\n                rl.question(\"Update album? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Album title: (\" + album.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album artists: (\" + album.artists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album date: (\" + album.date + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.date = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album label: (\" + album.label + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.label = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album language: (\" + album.language + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        album.language = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                console.log(\"Updating song...\");\r\n                console.log(\"Song track: \" + song.track);\r\n                console.log(\"Song title: \" + song.title);\r\n                console.log(\"Song artists: \" + song.artists);\r\n\r\n                rl.question(\"Update song? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Song track: (\" + song.track + \") \", answer => {\r\n                                    if (answer) {\r\n                                        song.track = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song title: (\" + song.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        song.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Song artists: (\" + song.artists + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        song.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                album.folder = \"Songs/\" + album.language + \"/\";\r\n\r\n                if (album.language === \"English\" && song.title === album.title && song.track === \"1\") {\r\n                    album.folder += \"Singles/\";\r\n                }\r\n\r\n                album.folder += album.date.substr(0, 4) + \"/\" + album.title.replace(/\\//g, \"\") + \"/\";\r\n                album.folder = album.folder.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                mkdirp(album.folder, error => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                let songFile: string;\r\n\r\n                if (song.mp3File) {\r\n                    songFile = song.mp3File;\r\n                }\r\n\r\n                song.mp3File = album.folder + song.track + \" - \" + song.title + \".mp3\";\r\n                song.mp3File = song.mp3File.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                if (!songFile!) {\r\n                    let progressBar: ProgressBar = new ProgressBar(\"Downloading song\"\r\n                        + \"... [:bar] :percent :speedMBps :sizeMB :etas\", {\r\n                        total: 100,\r\n                        width: 10,\r\n                        incomplete: \" \"\r\n                    }), progress: any;\r\n\r\n                    song.parser.parseFile(downloadProgress => {\r\n                        progressBar.update(downloadProgress.percent, {\r\n                            speed: (downloadProgress.speed / 1024 / 1024).toFixed(1),\r\n                            size: (downloadProgress.size.transferred / 1024 / 1024).toFixed(1)\r\n                        });\r\n\r\n                        progress = downloadProgress;\r\n                    })\r\n                        .then(parser => {\r\n                            progressBar.update(1, {\r\n                                speed: (0).toFixed(1),\r\n                                size: (progress.size.total / 1024 / 1024).toFixed(1)\r\n                            });\r\n\r\n                            console.log(\"\");\r\n\r\n                            fs.writeFile(song.mp3File, parser.output.file, error => {\r\n                                if (error) {\r\n                                    callback(error);\r\n                                    return;\r\n                                }\r\n\r\n                                callback();\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else {\r\n                    fs.rename(songFile!, song.mp3File, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }\r\n            }, callback => {\r\n                ffmpeg.ffprobe(song.mp3File, (error, data) => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    if (data.format.bit_rate >= 320000) {\r\n                        callback();\r\n                        return;\r\n                    }\r\n\r\n                    let tmpFile: string = song.mp3File.replace(\".mp3\", \".tmp\");\r\n\r\n                    fs.rename(song.mp3File, tmpFile, error => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        let progressBar: ProgressBar = new ProgressBar(\"Converting song\"\r\n                            + \"... [:bar] :percent :sizeMB :etas\", {\r\n                            total: 100,\r\n                            width: 10,\r\n                            incomplete: \" \"\r\n                        }), progress: any;\r\n\r\n                        ffmpeg(tmpFile)\r\n                            .audioBitrate(\"320k\")\r\n                            .on(\"progress\", convertProgress => {\r\n                                progressBar.update(convertProgress.percent / 100, {\r\n                                    size: (convertProgress.targetSize / 1024).toFixed(1)\r\n                                });\r\n\r\n                                progress = convertProgress;\r\n                            })\r\n                            .on(\"error\", error => {\r\n                                callback(error);\r\n                            })\r\n                            .on(\"end\", () => {\r\n                                progressBar.update(1, {\r\n                                    size: (progress.targetSize / 1024).toFixed(1)\r\n                                });\r\n\r\n                                fs.unlink(tmpFile, error => {\r\n                                    if (error) {\r\n                                        callback(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    console.log(\"\");\r\n\r\n                                    callback();\r\n                                });\r\n                            })\r\n                            .save(song.mp3File);\r\n                    });\r\n                });\r\n            }\r\n        ], error => {\r\n            rl.close();\r\n\r\n            if (error) {\r\n                console.error(error);\r\n            }\r\n        });\r\n    });\r\n\r\nprogram\r\n    .command(\"album\")\r\n    .action(() => {\r\n        console.log(\"Musique\");\r\n        console.log(\"\");\r\n\r\n        let albumUrl: string,\r\n            albumFolder: string,\r\n            songTracks: string;\r\n\r\n        let album: Album,\r\n            songs: Song[] = [];\r\n\r\n        async.series([\r\n            callback => {\r\n                async.series([\r\n                    callback => {\r\n                        rl.question(\"Album url: \", answer => {\r\n                            if (answer) {\r\n                                albumUrl = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Album folder: \", answer => {\r\n                            if (answer) {\r\n                                albumFolder = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }, callback => {\r\n                        rl.question(\"Song tracks: \", answer => {\r\n                            console.log(\"\");\r\n\r\n                            if (answer) {\r\n                                songTracks = answer;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                ], () => {\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                if (!albumUrl && !albumFolder || albumUrl && !songTracks) {\r\n                    callback(new Error());\r\n                    return;\r\n                }\r\n\r\n                if (albumUrl) {\r\n                    console.log(\"Parsing album...\");\r\n\r\n                    let songIndexes: number[] = [...new Set(songTracks.split(\", \")\r\n                        .map(value => parseInt(value) - 1))].sort();\r\n\r\n                    let platform: \"deezer\" | \"saavn\";\r\n\r\n                    if (albumUrl.includes(\"deezer\")) {\r\n                        platform = \"deezer\";\r\n                    } else if (albumUrl.includes(\"saavn\")) {\r\n                        platform = \"saavn\";\r\n                    }\r\n\r\n                    let songParserMap: Map<number, SongParser> = new Map<number, SongParser>();\r\n\r\n                    musique.parseAlbum(platform!, albumUrl)\r\n                        .then(parser => parser.parse())\r\n                        .then(parser => parser.parseSongs((childParser, index) => {\r\n                            songParserMap.set(index, childParser);\r\n\r\n                            console.log(\"Parsing song \" + (index + 1) + \"...\");\r\n\r\n                            return childParser.parse();\r\n                        }, ...songIndexes))\r\n                        .then(parser => {\r\n                            console.log(\"\");\r\n\r\n                            let albumOutput: AlbumOutput = parser.output;\r\n\r\n                            album = new Album();\r\n                            album.date = albumOutput.date;\r\n                            album.label = albumOutput.label;\r\n                            album.language = albumOutput.language;\r\n                            album.title = albumOutput.title;\r\n                            album.artists = [...new Set(albumOutput.artists\r\n                                .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n\r\n                            for (let songIndex of songIndexes) {\r\n                                let songOutput: SongOutput = albumOutput.songs[songIndex];\r\n\r\n                                let song: Song = new Song();\r\n                                song.title = songOutput.title;\r\n                                song.track = songOutput.track;\r\n                                song.artists = [...new Set(songOutput.artists\r\n                                    .map(value => value.title))].join(\"; \").replace(/\\.(\\w)/g, \". $1\");\r\n                                song.parser = songParserMap.get(songIndex)!;\r\n\r\n                                songs.push(song);\r\n                            }\r\n\r\n                            callback();\r\n                        })\r\n                        .catch(error => {\r\n                            callback(error);\r\n                        });\r\n                } else if (albumFolder) {\r\n                    fs.readdir(albumFolder, (error, files) => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        let songFiles: string[] = files.filter(value => value.endsWith(\".mp3\"))\r\n                            .sort((a, b) => parseInt(a.match(/(\\d+) - /)![1]) - parseInt(b.match(/(\\d+) - /)![1]));\r\n\r\n                        let tagMap: Map<string, string> = new Map<string, string>();\r\n\r\n                        for (let frame of nodeID3v24.readTag(songFiles[0]).frames) {\r\n                            tagMap.set(frame.type, frame.data.text);\r\n                        }\r\n\r\n                        album = new Album();\r\n                        album.date = tagMap.get(\"TDRL\")!.replace(\"\\u0000\", \"\");\r\n                        album.label = tagMap.get(\"TPUB\")!;\r\n                        album.language = tagMap.get(\"TLAN\")!;\r\n                        album.title = tagMap.get(\"TALB\")!;\r\n                        album.artists = tagMap.get(\"TPE2\")!;\r\n\r\n                        for (let songFile of songFiles) {\r\n                            let tagMap: Map<string, string> = new Map<string, string>();\r\n\r\n                            for (let frame of nodeID3v24.readTag(songFile).frames) {\r\n                                tagMap.set(frame.type, frame.data.text);\r\n                            }\r\n\r\n                            let song: Song = new Song();\r\n                            song.title = tagMap.get(\"TIT2\")!;\r\n                            song.track = tagMap.get(\"TRCK\")!;\r\n                            song.artists = tagMap.get(\"TPE1\")!;\r\n                            song.mp3File = songFile;\r\n\r\n                            songs.push(song);\r\n                        }\r\n\r\n                        callback();\r\n                    });\r\n                }\r\n            }, callback => {\r\n                console.log(\"Updating album...\");\r\n                console.log(\"Album title: \" + album.title);\r\n                console.log(\"Album artists: \" + album.artists);\r\n                console.log(\"Album date: \" + album.date);\r\n                console.log(\"Album label: \" + album.label);\r\n                console.log(\"Album language: \" + album.language);\r\n\r\n                rl.question(\"Update album? (no) \", answer => {\r\n                    console.log(\"\");\r\n\r\n                    if (answer === \"y\" || answer === \"yes\") {\r\n                        async.series([\r\n                            callback => {\r\n                                rl.question(\"Album title: (\" + album.title + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.title = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album artists: (\" + album.artists + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.artists = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album date: (\" + album.date + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.date = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album label: (\" + album.label + \") \", answer => {\r\n                                    if (answer) {\r\n                                        album.label = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }, callback => {\r\n                                rl.question(\"Album language: (\" + album.language + \") \", answer => {\r\n                                    console.log(\"\");\r\n\r\n                                    if (answer) {\r\n                                        album.language = answer;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            }\r\n                        ], () => {\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    console.log(\"Updating song \" + song.track + \"...\");\r\n                    console.log(\"Song track: \" + song.track);\r\n                    console.log(\"Song title: \" + song.title);\r\n                    console.log(\"Song artists: \" + song.artists);\r\n\r\n                    rl.question(\"Update song \" + song.track + \"? (no) \", answer => {\r\n                        console.log(\"\");\r\n\r\n                        if (answer === \"y\" || answer === \"yes\") {\r\n                            async.series([\r\n                                callback => {\r\n                                    rl.question(\"Song track: (\" + song.track + \") \", answer => {\r\n                                        if (answer) {\r\n                                            song.track = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }, callback => {\r\n                                    rl.question(\"Song title: (\" + song.title + \") \", answer => {\r\n                                        if (answer) {\r\n                                            song.title = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }, callback => {\r\n                                    rl.question(\"Song artists: (\" + song.artists + \") \", answer => {\r\n                                        console.log(\"\");\r\n\r\n                                        if (answer) {\r\n                                            song.artists = answer;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                }\r\n                            ], () => {\r\n                                callback();\r\n                            });\r\n                        } else {\r\n                            callback();\r\n                        }\r\n                    });\r\n                }, () => {\r\n                    callback();\r\n                })\r\n            }, callback => {\r\n                album.folder = \"Songs/\" + album.language + \"/\";\r\n\r\n                if (album.language === \"English\" && songs[0].title === album.title && songs[0].track === \"1\") {\r\n                    album.folder += \"Singles/\";\r\n                }\r\n\r\n                album.folder += album.date.substr(0, 4) + \"/\" + album.title.replace(/\\//g, \"\") + \"/\";\r\n                album.folder = album.folder.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                mkdirp(album.folder, error => {\r\n                    if (error) {\r\n                        callback(error);\r\n                        return;\r\n                    }\r\n\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    let songFile: string;\r\n\r\n                    if (song.mp3File) {\r\n                        songFile = song.mp3File;\r\n                    }\r\n\r\n                    song.mp3File = album.folder + song.track + \" - \" + song.title + \".mp3\";\r\n                    song.mp3File = song.mp3File.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n                    if (!songFile!) {\r\n                        let progressBar: ProgressBar = new ProgressBar(\"Downloading song \"\r\n                            + song.track + \"... [:bar] :percent :speedMBps :sizeMB :etas\", {\r\n                            total: 100,\r\n                            width: 10,\r\n                            incomplete: \" \"\r\n                        }), progress: any;\r\n\r\n                        song.parser.parseFile(downloadProgress => {\r\n                            progressBar.update(downloadProgress.percent, {\r\n                                speed: (downloadProgress.speed / 1024 / 1024).toFixed(1),\r\n                                size: (downloadProgress.size.transferred / 1024 / 1024).toFixed(1)\r\n                            });\r\n\r\n                            progress = downloadProgress;\r\n                        })\r\n                            .then(parser => {\r\n                                progressBar.update(1, {\r\n                                    speed: (0).toFixed(1),\r\n                                    size: (progress.size.total / 1024 / 1024).toFixed(1)\r\n                                });\r\n\r\n                                fs.writeFile(song.mp3File, parser.output.file, error => {\r\n                                    if (error) {\r\n                                        callback(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    callback();\r\n                                });\r\n                            })\r\n                            .catch(error => {\r\n                                callback(error);\r\n                            });\r\n                    } else {\r\n                        fs.rename(songFile!, song.mp3File, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            callback();\r\n                        });\r\n                    }\r\n                }, () => {\r\n                    console.log(\"\");\r\n\r\n                    callback();\r\n                });\r\n            }, callback => {\r\n                async.eachSeries(songs, (song, callback) => {\r\n                    ffmpeg.ffprobe(song.mp3File, (error, data) => {\r\n                        if (error) {\r\n                            callback(error);\r\n                            return;\r\n                        }\r\n\r\n                        if (data.format.bit_rate >= 320000) {\r\n                            callback();\r\n                            return;\r\n                        }\r\n\r\n                        let tmpFile: string = song.mp3File.replace(\".mp3\", \".tmp\");\r\n\r\n                        fs.rename(song.mp3File, tmpFile, error => {\r\n                            if (error) {\r\n                                callback(error);\r\n                                return;\r\n                            }\r\n\r\n                            let progressBar: ProgressBar = new ProgressBar(\"Converting song\"\r\n                                + \"... [:bar] :percent :sizeMB :etas\", {\r\n                                total: 100,\r\n                                width: 10,\r\n                                incomplete: \" \"\r\n                            }), progress: any;\r\n\r\n                            ffmpeg(tmpFile)\r\n                                .audioBitrate(\"320k\")\r\n                                .on(\"progress\", convertProgress => {\r\n                                    progressBar.update(convertProgress.percent / 100, {\r\n                                        size: (convertProgress.targetSize / 1024).toFixed(1)\r\n                                    });\r\n\r\n                                    progress = convertProgress;\r\n                                })\r\n                                .on(\"error\", error => {\r\n                                    callback(error);\r\n                                })\r\n                                .on(\"end\", () => {\r\n                                    progressBar.update(1, {\r\n                                        size: (progress.targetSize / 1024).toFixed(1)\r\n                                    });\r\n\r\n                                    fs.unlink(tmpFile, error => {\r\n                                        if (error) {\r\n                                            callback(error);\r\n                                            return;\r\n                                        }\r\n\r\n                                        callback();\r\n                                    });\r\n                                })\r\n                                .save(song.mp3File);\r\n                        });\r\n                    });\r\n                }, () => {\r\n                    console.log(\"\");\r\n\r\n                    callback();\r\n                });\r\n            }\r\n        ], error => {\r\n            rl.close();\r\n\r\n            if (error) {\r\n                console.error(error);\r\n            }\r\n        });\r\n    });\r\n\r\nprogram.parse(process.argv);\r\n"]}