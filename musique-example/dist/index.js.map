{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as Promise from \"bluebird\";\r\nimport * as mkdirp from \"mkdirp\";\r\nimport * as fs from \"fs\";\r\nimport * as request from \"request\";\r\nimport * as Jimp from \"jimp\";\r\nimport * as musique from \"musique\";\r\n\r\nconst nodeID3 = require(\"node-id3\");\r\n\r\nfunction downloadMp3(songOutput: any, albumOutput: any): Promise<void> {\r\n    let dirName: string, mp3Name: string, artName: string;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        dirName = \"./Songs/\"\r\n            + albumOutput.language + \"/\"\r\n            + albumOutput.year + \"/\"\r\n            + albumOutput.title + \"/\";\r\n        dirName = dirName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n        mkdirp(dirName, error => {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    }).then(() => {\r\n        mp3Name = dirName + songOutput.title + \".mp3\";\r\n        mp3Name = mp3Name.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            request.get(songOutput.mp3)\r\n                .on(\"error\", error => {\r\n                    reject(error);\r\n                })\r\n                .pipe(fs.createWriteStream(mp3Name))\r\n                .on(\"finish\", () => {\r\n                    resolve();\r\n                });\r\n        });\r\n    }).then(() => {\r\n        artName = dirName + songOutput.title + \".png\";\r\n        artName = artName.replace(/[\\\\:*?\"<>|]/g, \"\");\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            request.get(albumOutput.art)\r\n                .on(\"error\", error => {\r\n                    reject(error);\r\n                })\r\n                .pipe(fs.createWriteStream(artName))\r\n                .on(\"finish\", () => {\r\n                    Jimp.read(artName)\r\n                        .then(image => {\r\n                            image.resize(512, 512, Jimp.RESIZE_NEAREST_NEIGHBOR)\r\n                                .write(artName, error => {\r\n                                    if (error) {\r\n                                        reject(error);\r\n                                        return;\r\n                                    }\r\n\r\n                                    resolve();\r\n                                });\r\n                        })\r\n                        .catch(error => {\r\n                            reject(error);\r\n                        });\r\n                });\r\n        });\r\n    }).then(() => {\r\n        nodeID3.removeTags(mp3Name);\r\n\r\n        nodeID3.write({\r\n            album: albumOutput.title,\r\n            artist: songOutput.artists.map((artist: any) => artist.title).join(\"; \"),\r\n            genre: songOutput.genre,\r\n            image: artName,\r\n            language: albumOutput.language,\r\n            performerInfo: albumOutput.artists.map((artist: any) => artist.title).join(\"; \"),\r\n            publisher: albumOutput.label,\r\n            title: songOutput.title,\r\n            trackNumber: songOutput.track,\r\n            year: albumOutput.year,\r\n        }, mp3Name)\r\n\r\n        //TODO\r\n    }).then(() => {\r\n        return new Promise<void>((resolve, reject) => {\r\n            fs.unlink(artName, error => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve();\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nmusique.parseSong(\"saavn\", \"https://www.saavn.com/s/song/tamil/Mersal/Neethanae/MiIPaAFCBlc\")\r\n    .then(parser => parser.parse())\r\n    .then(parser => parser.parseAlbum(childParser => childParser.parse()))\r\n    .then(parser => downloadMp3(parser.output, parser.output.album))\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n"]}