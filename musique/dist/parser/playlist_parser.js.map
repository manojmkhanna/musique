{"version":3,"sources":["../src/parser/playlist_parser.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AAEpC,+CAAuC;AACvC,4DAAoD;AACpD,+DAAuD;AACvD,kEAA0D;AAI1D,oBAAoC,SAAQ,qBAA0D;IACxF,WAAW;QACjB,MAAM,CAAC,IAAI,OAAO,CAAgB,OAAO;YACrC,OAAO,CAAC,IAAI,wBAAa,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAES,YAAY;QAClB,MAAM,CAAC,IAAI,OAAO,CAAiB,OAAO;YACtC,OAAO,CAAC,IAAI,yBAAc,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAES,aAAa;QACnB,MAAM,CAAC,IAAI,OAAO,CAAkB,OAAO;YACvC,OAAO,CAAC,IAAI,0BAAe,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK;QACR,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE;aACf,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;aAC7B,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACvC,CAAC;IAES,WAAW;QACjB,MAAM,CAAC,IAAI,OAAO,CAAS,OAAO;YAC9B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAES,WAAW;QACjB,MAAM,CAAC,IAAI,OAAO,CAAe,OAAO;YACpC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC9D,CAAC;IAEM,UAAU,CAAC,aAAwE,EACxE,GAAG,OAAiB;QAClC,EAAE,CAAC,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,IAAI,OAAO,CAAa,OAAO;gBACnE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAC9C,CAAC,CAAC,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;CACJ;AAnDD,iCAmDC","file":"playlist_parser.js","sourcesContent":["import * as Promise from \"bluebird\";\r\n\r\nimport BaseParser from \"./base_parser\";\r\nimport PlaylistInput from \"../input/playlist_input\";\r\nimport PlaylistOutput from \"../output/playlist_output\";\r\nimport PlaylistContent from \"../content/playlist_content\";\r\nimport SongOutput from \"../output/song_output\";\r\nimport SongParser from \"./song_parser\";\r\n\r\nexport default class PlaylistParser extends BaseParser<PlaylistInput, PlaylistOutput, PlaylistContent> {\r\n    protected createInput(): Promise<PlaylistInput> {\r\n        return new Promise<PlaylistInput>(resolve => {\r\n            resolve(new PlaylistInput());\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<PlaylistOutput> {\r\n        return new Promise<PlaylistOutput>(resolve => {\r\n            resolve(new PlaylistOutput());\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<PlaylistContent> {\r\n        return new Promise<PlaylistContent>(resolve => {\r\n            resolve(new PlaylistContent());\r\n        });\r\n    }\r\n\r\n    public parse(): Promise<this> {\r\n        return super.parse()\r\n            .then(() => this.parseTitle())\r\n            .then(() => this.parseSongs());\r\n    }\r\n\r\n    protected createTitle(): Promise<string> {\r\n        return new Promise<string>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createSongs(): Promise<SongOutput[]> {\r\n        return new Promise<SongOutput[]>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public parseTitle(): Promise<this> {\r\n        return this.parseValue(\"title\", () => this.createTitle());\r\n    }\r\n\r\n    public parseSongs(outputsParser?: (childParser: SongParser, index: number) => Promise<any>,\r\n                      ...indexes: number[]): Promise<this> {\r\n        if (outputsParser == undefined) {\r\n            return this.parseValue(\"songs\", () => this.createSongs());\r\n        } else {\r\n            return this.parseOutputs(\"songs\", () => new Promise<SongParser>(resolve => {\r\n                resolve(this.platform.createSongParser());\r\n            }), outputsParser, ...indexes);\r\n        }\r\n    }\r\n}\r\n"]}