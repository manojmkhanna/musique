{"version":3,"sources":["../src/parser/artist_parser.ts"],"names":[],"mappings":"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","file":"artist_parser.js","sourcesContent":["import * as Promise from \"bluebird\";\r\n\r\nimport BaseParser from \"./base_parser\";\r\nimport ArtistInput from \"../input/artist_input\";\r\nimport ArtistOutput from \"../output/artist_output\";\r\nimport ArtistContent from \"../content/artist_content\";\r\nimport AlbumOutput from \"../output/album_output\";\r\nimport SongOutput from \"../output/song_output\";\r\nimport PlaylistOutput from \"../output/playlist_output\";\r\nimport AlbumParser from \"./album_parser\";\r\nimport SongParser from \"./song_parser\";\r\nimport PlaylistParser from \"./playlist_parser\";\r\n\r\nexport default class ArtistParser extends BaseParser<ArtistInput, ArtistOutput, ArtistContent> {\r\n    protected createInput(): Promise<ArtistInput> {\r\n        return new Promise<ArtistInput>(resolve => {\r\n            resolve(new ArtistInput());\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<ArtistOutput> {\r\n        return new Promise<ArtistOutput>(resolve => {\r\n            resolve(new ArtistOutput());\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<ArtistContent> {\r\n        return new Promise<ArtistContent>(resolve => {\r\n            resolve(new ArtistContent());\r\n        });\r\n    }\r\n\r\n    public parse(): Promise<this> {\r\n        return super.parse()\r\n            .then(() => this.parseTitle())\r\n            .then(() => this.parseAlbums())\r\n            .then(() => this.parseSongs());\r\n    }\r\n\r\n    protected createTitle(): Promise<string> {\r\n        return new Promise<string>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createAlbums(): Promise<AlbumOutput[]> {\r\n        return new Promise<AlbumOutput[]>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createSongs(): Promise<SongOutput[]> {\r\n        return new Promise<SongOutput[]>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createPlaylists(): Promise<PlaylistOutput[]> {\r\n        return new Promise<PlaylistOutput[]>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public parseTitle(): Promise<this> {\r\n        return this.parseValue(\"title\", () => this.createTitle());\r\n    }\r\n\r\n    public parseAlbums(outputsParser?: (childParser: AlbumParser, index: number) => Promise<any>,\r\n                       ...indexes: number[]): Promise<this> {\r\n        if (outputsParser == undefined) {\r\n            return this.parseValue(\"albums\", () => this.createAlbums());\r\n        } else {\r\n            return this.parseOutputs(\"albums\", () => new Promise<AlbumParser>(resolve => {\r\n                resolve(this.platform.createAlbumParser());\r\n            }), outputsParser, ...indexes);\r\n        }\r\n    }\r\n\r\n    public parseSongs(outputsParser?: (childParser: SongParser, index: number) => Promise<any>,\r\n                      ...indexes: number[]): Promise<this> {\r\n        if (outputsParser == undefined) {\r\n            return this.parseValue(\"songs\", () => this.createSongs());\r\n        } else {\r\n            return this.parseOutputs(\"songs\", () => new Promise<SongParser>(resolve => {\r\n                resolve(this.platform.createSongParser());\r\n            }), outputsParser, ...indexes);\r\n        }\r\n    }\r\n\r\n    public parsePlaylists(outputsParser?: (childParser: PlaylistParser, index: number) => Promise<any>,\r\n                          ...indexes: number[]): Promise<this> {\r\n        if (outputsParser == undefined) {\r\n            return this.parseValue(\"playlists\", () => this.createPlaylists());\r\n        } else {\r\n            return this.parseOutputs(\"playlists\", () => new Promise<PlaylistParser>(resolve => {\r\n                resolve(this.platform.createPlaylistParser());\r\n            }), outputsParser, ...indexes);\r\n        }\r\n    }\r\n}\r\n"]}