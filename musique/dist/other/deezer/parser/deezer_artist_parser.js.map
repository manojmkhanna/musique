{"version":3,"sources":["../src/other/deezer/parser/deezer_artist_parser.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,mCAAmC;AACnC,mCAAmC;AAEnC,iEAAyD;AACzD,oEAA4D;AAC5D,0DAAkD;AAGlD,wBAAwC,SAAQ,uBAAY;IAC9C,aAAa;QACnB,MAAM,CAAC,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,0BAAe,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE;gBAC/E,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,MAAM,CAAC;gBACX,CAAC;gBAED,IAAI,OAAO,GAAkB,IAAI,wBAAa,EAAE,CAAC;gBACjD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBAEpB,OAAO,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAES,cAAc;QACpB,MAAM,CAAC,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;YAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;YAEtB,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAES,WAAW;QACjB,MAAM,CAAC,IAAI,OAAO,CAAS,OAAO,CAAC,EAAE;YACjC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAExC,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACP,CAAC;IAES,eAAe;QACrB,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,MAAM;IAC1C,CAAC;CACJ;AArCD,qCAqCC","file":"deezer_artist_parser.js","sourcesContent":["import * as Promise from \"bluebird\";\r\nimport * as request from \"request\";\r\nimport * as cheerio from \"cheerio\";\r\n\r\nimport ArtistParser from \"../../../parser/artist_parser\";\r\nimport ArtistContent from \"../../../content/artist_content\";\r\nimport DeezerConstants from \"../deezer_constants\";\r\nimport PlaylistOutput from \"../../../output/playlist_output\";\r\n\r\nexport default class DeezerArtistParser extends ArtistParser {\r\n    protected createContent(): Promise<ArtistContent> {\r\n        return new Promise<ArtistContent>((resolve, reject) => {\r\n            request(this.input.url, DeezerConstants.REQUEST_OPTIONS, (error, response, body) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                let content: ArtistContent = new ArtistContent();\r\n                content.html = body;\r\n\r\n                resolve(content);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected contentCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            this.input.albums = [];\r\n            this.input.songs = [];\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createTitle(): Promise<string> {\r\n        return new Promise<string>(resolve => {\r\n            let $ = cheerio.load(this.content.html);\r\n\r\n            resolve($(\"h1#naboo_artist_name\").first().text().trim());\r\n        });\r\n    }\r\n\r\n    protected createPlaylists(): Promise<PlaylistOutput[]> {\r\n        return super.createPlaylists(); //TODO\r\n    }\r\n}\r\n"]}