{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AAGpC,iEAAyD;AAEzD,mDAA2C;AAE3C,qDAA6C;AAE7C,uDAA+C;AAE/C,2DAAmD;AAEnD,uDAA+C;AAI/C,wBAAwB,YAA0B;IAC9C,EAAE,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,wBAAa,EAAE,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAChD,CAAC;AACL,CAAC;AAED,mBAA0B,YAA0B,EAAE,GAAW;IAC7D,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE;SACjD,MAAM,CAAC,MAAM,IAAI,OAAO,CAAY,OAAO;QACxC,IAAI,KAAK,GAAG,IAAI,oBAAS,EAAE,CAAC;QAC5B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;QAEhB,OAAO,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;AARD,8BAQC;AAED,oBAA2B,YAA0B,EAAE,GAAW;IAC9D,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,iBAAiB,EAAE;SAClD,MAAM,CAAC,MAAM,IAAI,OAAO,CAAa,OAAO;QACzC,IAAI,KAAK,GAAG,IAAI,qBAAU,EAAE,CAAC;QAC7B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;QAEhB,OAAO,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;AARD,gCAQC;AAED,qBAA4B,YAA0B,EAAE,GAAW;IAC/D,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,kBAAkB,EAAE;SACnD,MAAM,CAAC,MAAM,IAAI,OAAO,CAAc,OAAO;QAC1C,IAAI,KAAK,GAAG,IAAI,sBAAW,EAAE,CAAC;QAC9B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;QAEhB,OAAO,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;AARD,kCAQC;AAED,uBAA8B,YAA0B,EAAE,GAAW;IACjE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,oBAAoB,EAAE;SACrD,MAAM,CAAC,MAAM,IAAI,OAAO,CAAgB,OAAO;QAC5C,IAAI,KAAK,GAAG,IAAI,wBAAa,EAAE,CAAC;QAChC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;QAEhB,OAAO,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;AARD,sCAQC;AAED,qBAA4B,YAA0B,EAAE,KAAa;IACjE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,kBAAkB,EAAE;SACnD,MAAM,CAAC,MAAM,IAAI,OAAO,CAAc,OAAO;QAC1C,IAAI,KAAK,GAAG,IAAI,sBAAW,EAAE,CAAC;QAC9B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAEpB,OAAO,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;AARD,kCAQC","file":"index.js","sourcesContent":["import * as Promise from \"bluebird\";\r\n\r\nimport Platform from \"./platform/platform\";\r\nimport SaavnPlatform from \"./other/saavn/saavn_platform\";\r\nimport SongParser from \"./parser/song_parser\";\r\nimport SongInput from \"./input/song_input\";\r\nimport AlbumParser from \"./parser/album_parser\";\r\nimport AlbumInput from \"./input/album_input\";\r\nimport ArtistParser from \"./parser/artist_parser\";\r\nimport ArtistInput from \"./input/artist_input\";\r\nimport PlaylistParser from \"./parser/playlist_parser\";\r\nimport PlaylistInput from \"./input/playlist_input\";\r\nimport SearchParser from \"./parser/search_parser\";\r\nimport SearchInput from \"./input/search_input\";\r\n\r\nexport type PlatformName = \"saavn\";\r\n\r\nfunction createPlatform(platformName: PlatformName): Platform {\r\n    if (platformName === \"saavn\") {\r\n        return new SaavnPlatform();\r\n    } else {\r\n        throw new Error(\"platformName is invalid!\");\r\n    }\r\n}\r\n\r\nexport function parseSong(platformName: PlatformName, url: string): Promise<SongParser> {\r\n    return createPlatform(platformName).createSongParser()\r\n        .create(() => new Promise<SongInput>(resolve => {\r\n            let input = new SongInput();\r\n            input.url = url;\r\n\r\n            resolve(input);\r\n        }));\r\n}\r\n\r\nexport function parseAlbum(platformName: PlatformName, url: string): Promise<AlbumParser> {\r\n    return createPlatform(platformName).createAlbumParser()\r\n        .create(() => new Promise<AlbumInput>(resolve => {\r\n            let input = new AlbumInput();\r\n            input.url = url;\r\n\r\n            resolve(input);\r\n        }));\r\n}\r\n\r\nexport function parseArtist(platformName: PlatformName, url: string): Promise<ArtistParser> {\r\n    return createPlatform(platformName).createArtistParser()\r\n        .create(() => new Promise<ArtistInput>(resolve => {\r\n            let input = new ArtistInput();\r\n            input.url = url;\r\n\r\n            resolve(input);\r\n        }));\r\n}\r\n\r\nexport function parsePlaylist(platformName: PlatformName, url: string): Promise<PlaylistParser> {\r\n    return createPlatform(platformName).createPlaylistParser()\r\n        .create(() => new Promise<PlaylistInput>(resolve => {\r\n            let input = new PlaylistInput();\r\n            input.url = url;\r\n\r\n            resolve(input);\r\n        }));\r\n}\r\n\r\nexport function parseSearch(platformName: PlatformName, query: string): Promise<SearchParser> {\r\n    return createPlatform(platformName).createSearchParser()\r\n        .create(() => new Promise<SearchInput>(resolve => {\r\n            let input = new SearchInput();\r\n            input.query = query;\r\n\r\n            resolve(input);\r\n        }));\r\n}\r\n"]}